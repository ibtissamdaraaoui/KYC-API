# ====================================================================
#     FICHIER D'EXEMPLE DE CONFIGURATION POUR L'ENVIRONNEMENT
#
# Instructions:
# 1. Copiez ce fichier et renommez la copie en ".env".
# 2. Remplissez les valeurs ci-dessous avec vos propres secrets
#    et configurations locales.
# 3. Le fichier .env ne doit JAMAIS être commité sur Git.
# ====================================================================


# ---- Postgres (Base de données principale de l'application) ----
# Pour une exécution locale des services Python, utilisez localhost.
# Pour une exécution des services dans Docker, utilisez le nom du service (ex: postgres).
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/kyc_db
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=kyc_db


# ---- MinIO (Stockage Objet S3) ----
# Ces identifiants sont utilisés à la fois par Docker Compose et les services Python.
MINIO_ENDPOINT=localhost:9000
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin
MINIO_DOCS_BUCKET=kyc-docs
MINIO_SELFIES_BUCKET=kyc-selfies


# ---- Apache Kafka (Bus de messages) ----
# Pour une exécution locale des services Python, utilisez localhost.
# Pour une exécution des services dans Docker, utilisez kafka:29092
KAFKA_BROKER=localhost:9092
# Noms des topics (généralement, on ne les change pas)
KAFKA_DOCUMENT_UPLOADED_TOPIC=document_uploaded
KAFKA_SELFIE_UPLOADED_TOPIC=selfie_uploaded
KAFKA_DOCUMENT_VERIFIED_TOPIC=document_verified
KAFKA_MATCHING_SUCCESS_TOPIC=matching_completed
KAFKA_FAILURE_TOPIC=kyc_case_failed
# Noms des groupes de consommateurs (doivent être uniques par service)
KAFKA_VERIFICATION_GROUP_ID=verification_group_1
KAFKA_MATCHING_GROUP_ID=matching_group_1
KAFKA_WORKFLOW_GROUP_ID=workflow_group_1


# ---- Sécurité ----
# Clé secrète pour des usages internes (ex: communication inter-services).
# Générez une clé unique avec : python -c "import secrets; print(secrets.token_hex(32))"
JWT_SECRET_KEY=CHANGER_MOI_AVEC_UNE_CLE_SECRETE_FORTE

# Clé "maître" utilisée pour chiffrer les données sensibles dans la BDD.
# NE JAMAIS CHANGER CETTE VALEUR APRES LA PREMIERE MISE EN PRODUCTION.
# Générez une clé unique avec : python -c "import secrets; print(secrets.token_hex(32))"
DB_DATA_ENCRYPTION_KEY=CHANGER_MOI_AVEC_UNE_AUTRE_CLE_SECRETE_FORTE


# ---- Vault (Gestion des secrets de chiffrement) ----
# Pour une exécution locale des services Python, utilisez 127.0.0.1
# Pour une exécution des services dans Docker, utilisez http://host.docker.internal:8200
VAULT_ADDR=http://127.0.0.1:8200
# Le token "root" de votre instance Vault locale.
VAULT_TOKEN=CHANGER_MOI_AVEC_VOTRE_VAULT_TOKEN


# ---- Ollama (Intelligence Artificielle) ----
# Pour une exécution locale des services Python, utilisez localhost.
# Pour une exécution des services dans Docker, utilisez http://host.docker.internal:11434
OLLAMA_API_URL=http://localhost:11434


# ---- Kong (API Gateway) ----
# L'URL de l'API d'administration de Kong.
# Pour une exécution locale du workflow_service, utilisez localhost.
# Pour une exécution du workflow_service dans Docker, utilisez http://kong:8001
KONG_ADMIN_URL=http://localhost:8001